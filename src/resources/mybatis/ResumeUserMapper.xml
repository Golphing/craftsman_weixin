<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.craftsmanasia.dao.ResumeUserDao">
	
	<resultMap type="User" id="userResult"
		extends="com.craftsmanasia.dao.UserDao.userResult">
	</resultMap>
	
	<resultMap type="ResumeUser" id="resumeUserResult">
		<id property="id" column="resume_user_id"/>
		
		<result property="name" column="resume_user_name"/>
		<result property="telephone" column="resume_user_telephone"/>
		<result property="gender" column="resume_user_gender"/>
		<result property="birthday" column="resume_user_birthday"/>
		<result property="email" column="resume_user_email"/>
		<result property="home" column="resume_user_home"/>
		<result property="userId" column="resume_user_user_id"/>
		
		<association property="user" 
			javaType="User" resultMap="userResult">
		</association>
	</resultMap>
	
	<sql id="FIELDS">
		telephone,name,gender,birthday,email,home,user_id
	</sql>
	
	<sql id="pagingLimit">
		<include refid="com.craftsmanasia.dao.CommonDataDao.pagingLimit"/>
	</sql>
	
	<sql id="userColumns">
		<include refid="com.craftsmanasia.dao.UserDao.userColumns"/>
	</sql>
	
	<sql id="resumeUserColomns">
		ru.id AS resume_user_id,
		ru.name AS resume_user_name,
		ru.telephone AS resume_user_telephone,
		ru.gender AS resume_user_gender,
		ru.birthday AS resume_user_birthday,
		ru.email AS resume_user_email,
		ru.home AS resume_user_home,
		ru.user_id AS resume_user_user_id
	</sql>
	
	<insert id="add" useGeneratedKeys="true" keyProperty="id" parameterType="ResumeUser"> 
		insert into resume_user(<include refid="FIELDS"/>) values(#{telephone},#{name},#{gender},#{birthday},#{email},#{home},#{userId})
	</insert>
	
	<update id="update">
		update resume_user set telephone=#{telephone},gender=#{gender},birthday=#{birthday},email=#{email},home=#{home} where id=#{id}
	</update>
	<select id="count1" resultType="int">
		select count(*) from resume_user
	</select>
	
	<select id="selectResumeUserByUserId"
	 resultMap="resumeUserResult">
		SELECT
			<include refid="resumeUserColomns"/>
		FROM
			resume_user ru
		WHERE
			ru.user_id = #{userId, javaType=int, jdbcType=INTEGER}
	</select>
	
	<sql id="userFilter">
		<if test="filter.nickName !=null">
			user.nickName = #{filter.nickName, javaType=string, jdbcType=CHAR}
		</if>
		<if test="filter.wechatAccount !=null">
			AND uuser.wechat_account = #{filter.wechatAccount, javaType=string, jdbcType=CHAR}
		</if>
		<if test="filter.name !=null">
			AND ru.name = #{filter.name, javaType=string, jdbcType=CHAR}
		</if>
		<if test="filter.telephone !=null">
			AND user.telephone = #{filter.telephone, javaType=string, jdbcType=CHAR}
		</if>
	</sql>
	
	<select id="selectResumeUsersByUserFilter"
	 parameterType="map"
	 resultMap="resumeUserResult">
		SELECT
			<include refid="resumeUserColomns"/>,
			<include refid="userColumns"/>
		FROM
			resume_user ru
			INNER JOIN user ON user.id = ru.user_id
		<where>
			<include refid="userFilter"/>
		</where>
		ORDER BY
		<choose>
			<when test="filter.ordered == true">
	  				${filter.orderBy}
	  			</when>
	  			<otherwise>
	  				user.id ASC
	  			</otherwise>
	  		</choose>
		<include refid="pagingLimit"/>
	</select>
	
	<select id="countResumeUsersByUserFilter"
	 resultType="int">
		SELECT
			count(*)
		FROM
			resume_user ru
			INNER JOIN user ON user.id = ru.user_id
		<where>
			<include refid="userFilter"/>
		</where>
		<include refid="pagingLimit"/>
	</select>
	
</mapper>